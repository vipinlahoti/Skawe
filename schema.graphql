
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  _contains: String
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

  input AuthPasswordInput {
    email: String
    password: String
  }
  type AuthResult {
    token: String
    userId: String
  }
  type LogoutResult {
    userId: String
  }

  input SignupInput {
    email: String
    password: String
  }
  type SignupResult {
    userId: String
  }

  input SetPasswordInput {
    newPassword: String
  }

  #type SetPasswordResult # Will auth user again so we reuse AuthResult atm

  input ResetPasswordInput {
    token: String
    newPassword: String
  }
  type ResetPasswordResult {
    userId: String
  }

  input VerifyEmailInput {
    token: String
  }
  type VerifyEmailResult {
    userId: String
  }

  input AuthEmailInput {
    email: String
  }

type EmailResponse {
  from: String
  to: String
  subject: String
  success: JSON
  error: String
}
union Voteable = Post | Comment | Ticket | Reply

# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
  votes(collectionName: String): [Vote] 
  theme: String 
  autoBackup: Boolean 
  postCount: Float 
  posts(limit: Int = 5): [Post] 
  comments(limit: Int = 5): [Comment] 
  commentCount: Float 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  groups: [String] 
  theme: String 
  autoBackup: Boolean 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  groups: [String] 
  theme: String 
  autoBackup: Boolean 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  groups: String_Array_Selector
  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector

  theme: String_Selector
  autoBackup: Boolean_Selector
  postCount: Float_Selector


  commentCount: Float_Selector
  notifications_users: Boolean_Selector
  notifications_posts: Boolean_Selector
  notifications_comments: Boolean_Selector
  notifications_replies: Boolean_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
  votes: SortOptions
  theme: SortOptions
  autoBackup: SortOptions
  postCount: SortOptions
  posts: SortOptions
  comments: SortOptions
  commentCount: SortOptions
  notifications_users: SortOptions
  notifications_posts: SortOptions
  notifications_comments: SortOptions
  notifications_replies: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Emails
type Email {
  name: String 
  template: String 
  subject: String 
  testPath: String 
}


input DeleteEmailInput{
  filter: EmailFilterInput
  id: String
}

input SingleEmailInput {
  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EmailSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiEmailInput {

  # filtering
  filter: EmailFilterInput
  sort: EmailSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleEmailOutput{
  result: Email
}

type  MultiEmailOutput{
  results: [Email]
  totalCount: Int
}

type EmailMutationOutput{
  data: Email
}

input EmailFilterInput {
  _and: [EmailFilterInput]
  _not: EmailFilterInput
  _or: [EmailFilterInput]


  name: String_Selector
  template: String_Selector
  subject: String_Selector
  testPath: String_Selector
}

input EmailSortInput {
  name: SortOptions
  template: SortOptions
  subject: SortOptions
  testPath: SortOptions
}

input EmailSelectorInput {
  _and: [EmailSelectorInput]
  _or: [EmailSelectorInput]

}

input EmailSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Settings
type Setting {
  name: String 
  value: JSON 
  defaultValue: JSON 
  isPublic: Boolean 
  description: String 
}


input DeleteSettingInput{
  filter: SettingFilterInput
  id: String
}

input SingleSettingInput {
  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SettingSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiSettingInput {

  # filtering
  filter: SettingFilterInput
  sort: SettingSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleSettingOutput{
  result: Setting
}

type  MultiSettingOutput{
  results: [Setting]
  totalCount: Int
}

type SettingMutationOutput{
  data: Setting
}

input SettingFilterInput {
  _and: [SettingFilterInput]
  _not: SettingFilterInput
  _or: [SettingFilterInput]


  name: String_Selector


  isPublic: Boolean_Selector
  description: String_Selector
}

input SettingSortInput {
  name: SortOptions
  value: SortOptions
  defaultValue: SortOptions
  isPublic: SortOptions
  description: SortOptions
}

input SettingSelectorInput {
  _and: [SettingSelectorInput]
  _or: [SettingSelectorInput]

}

input SettingSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Callbacks
type Callback {
  name: String 
  iterator: JSON 
  properties: [JSON] 
  runs: String 
  newSyntax: Boolean 
  returns: String 
  description: String 
  hooks: [String] 
}


input DeleteCallbackInput{
  filter: CallbackFilterInput
  id: String
}

input SingleCallbackInput {
  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CallbackSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCallbackInput {

  # filtering
  filter: CallbackFilterInput
  sort: CallbackSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCallbackOutput{
  result: Callback
}

type  MultiCallbackOutput{
  results: [Callback]
  totalCount: Int
}

type CallbackMutationOutput{
  data: Callback
}

input CallbackFilterInput {
  _and: [CallbackFilterInput]
  _not: CallbackFilterInput
  _or: [CallbackFilterInput]


  name: String_Selector


  runs: String_Selector
  newSyntax: Boolean_Selector
  returns: String_Selector
  description: String_Selector

}

input CallbackSortInput {
  name: SortOptions
  iterator: SortOptions
  properties: SortOptions
  runs: SortOptions
  newSyntax: SortOptions
  returns: SortOptions
  description: SortOptions
  hooks: SortOptions
}

input CallbackSelectorInput {
  _and: [CallbackSelectorInput]
  _or: [CallbackSelectorInput]

}

input CallbackSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Votes
type Vote {
  _id: String 
  documentId: String 
  collectionName: String 
  userId: String 
  voteType: String 
  power: Float 
  votedAt: Date 
  votedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteVoteInput{
  filter: VoteFilterInput
  id: String
}

input SingleVoteInput {
  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: VoteSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiVoteInput {

  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleVoteOutput{
  result: Vote
}

type  MultiVoteOutput{
  results: [Vote]
  totalCount: Int
}

type VoteMutationOutput{
  data: Vote
}

input VoteFilterInput {
  _and: [VoteFilterInput]
  _not: VoteFilterInput
  _or: [VoteFilterInput]


  _id: String_Selector
  documentId: String_Selector
  collectionName: String_Selector
  userId: String_Selector
  voteType: String_Selector
  power: Float_Selector
  votedAt: Date_Selector
}

input VoteSortInput {
  _id: SortOptions
  documentId: SortOptions
  collectionName: SortOptions
  userId: SortOptions
  voteType: SortOptions
  power: SortOptions
  votedAt: SortOptions
}

input VoteSelectorInput {
  _and: [VoteSelectorInput]
  _or: [VoteSelectorInput]

}

input VoteSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Posts
type Post {
  _id: String 
  createdAt: Date 
  title: String 
  slug: String 
  body: String 
  htmlBody: String 
  excerpt: String 
  thumbnailUrl: String 
  viewCount: Float 
  lastCommentedAt: Date 
  clickCount: Float 
  status: Float 
  postedAt: Date 
  postedAtFormatted: String 
  sticky: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  categoriesIds: [String] 
  categories: [Category] 
  commentCount: Float 
  commentersIds: [String] 
  commenters: [User] 
  pagePath: String 
  pageUrl: String 
  comments(limit: Int = 5): [Comment] 
  emailShareUrl: String 
  twitterShareUrl: String 
  facebookShareUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  cloudinaryId: String 
  cloudinaryUrls: [JSON] 
  cloudinaryUrl(format: String): String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  lastCommentedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeletePostInput{
  filter: PostFilterInput
  id: String
}

input SinglePostInput {
  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PostSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiPostInput {

  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SinglePostOutput{
  result: Post
}

type  MultiPostOutput{
  results: [Post]
  totalCount: Int
}

type PostMutationOutput{
  data: Post
}

input CreatePostInput {
  data: CreatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreatePostDataInput {
  title: String 
  body: String 
  thumbnailUrl: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  userId: String 
  categoriesIds: [String] 
}

input UpdatePostInput{
  filter: PostFilterInput
  id: String
  data: UpdatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertPostInput{
  filter: PostFilterInput
  id: String
  data: UpdatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdatePostDataInput {
  title: String 
  body: String 
  thumbnailUrl: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  categoriesIds: [String] 
}

input PostFilterInput {
  _and: [PostFilterInput]
  _not: PostFilterInput
  _or: [PostFilterInput]
  _byCategory: PostByCategoryFilterInput

  _id: String_Selector
  createdAt: Date_Selector
  title: String_Selector
  slug: String_Selector
  body: String_Selector
  htmlBody: String_Selector
  excerpt: String_Selector
  thumbnailUrl: String_Selector
  viewCount: Float_Selector
  lastCommentedAt: Date_Selector
  clickCount: Float_Selector
  status: Float_Selector
  postedAt: Date_Selector
  sticky: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  categoriesIds: String_Array_Selector
  commentCount: Float_Selector
  commentersIds: String_Array_Selector
  pagePath: String_Selector
  pageUrl: String_Selector

  emailShareUrl: String_Selector
  twitterShareUrl: String_Selector
  facebookShareUrl: String_Selector


  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
  cloudinaryId: String_Selector

  cloudinaryUrl: String_Selector
}

input PostByCategoryFilterInput{
  slug: String
}

input PostSortInput {
  _id: SortOptions
  createdAt: SortOptions
  title: SortOptions
  slug: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  excerpt: SortOptions
  thumbnailUrl: SortOptions
  viewCount: SortOptions
  lastCommentedAt: SortOptions
  clickCount: SortOptions
  status: SortOptions
  postedAt: SortOptions
  sticky: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  categoriesIds: SortOptions
  commentCount: SortOptions
  commentersIds: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  comments: SortOptions
  emailShareUrl: SortOptions
  twitterShareUrl: SortOptions
  facebookShareUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
  cloudinaryId: SortOptions
  cloudinaryUrls: SortOptions
  cloudinaryUrl: SortOptions
}

input PostSelectorInput {
  _and: [PostSelectorInput]
  _or: [PostSelectorInput]

}

input PostSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Comments
type Comment {
  _id: String 
  parentCommentId: String 
  parentComment: Comment 
  topLevelCommentId: String 
  topLevelComment: Comment 
  createdAt: Date 
  postedAt: Date 
  body: String 
  htmlBody: String 
  author: String 
  postId: String 
  post: Post 
  userId: String 
  user: User 
  isDeleted: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  pagePath: String 
  pageUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  postedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteCommentInput{
  filter: CommentFilterInput
  id: String
}

input SingleCommentInput {
  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CommentSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCommentInput {

  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCommentOutput{
  result: Comment
}

type  MultiCommentOutput{
  results: [Comment]
  totalCount: Int
}

type CommentMutationOutput{
  data: Comment
}

input CreateCommentInput {
  data: CreateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateCommentDataInput {
  parentCommentId: String 
  topLevelCommentId: String 
  body: String 
  postId: String 
  userId: String 
}

input UpdateCommentInput{
  filter: CommentFilterInput
  id: String
  data: UpdateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertCommentInput{
  filter: CommentFilterInput
  id: String
  data: UpdateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateCommentDataInput {
  body: String 
}

input CommentFilterInput {
  _and: [CommentFilterInput]
  _not: CommentFilterInput
  _or: [CommentFilterInput]


  _id: String_Selector
  parentCommentId: String_Selector
  topLevelCommentId: String_Selector
  createdAt: Date_Selector
  postedAt: Date_Selector
  body: String_Selector
  htmlBody: String_Selector
  author: String_Selector
  postId: String_Selector
  userId: String_Selector
  isDeleted: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector


  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
}

input CommentSortInput {
  _id: SortOptions
  parentCommentId: SortOptions
  topLevelCommentId: SortOptions
  createdAt: SortOptions
  postedAt: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  author: SortOptions
  postId: SortOptions
  userId: SortOptions
  isDeleted: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input CommentSelectorInput {
  _and: [CommentSelectorInput]
  _or: [CommentSelectorInput]

}

input CommentSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Tickets
type Ticket {
  _id: String 
  createdAt: Date 
  subject: String 
  slug: String 
  body: String 
  htmlBody: String 
  thumbnailUrl: String 
  lastReplyedAt: Date 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  departmentsIds: [String] 
  departments: [Department] 
  replyCount: Float 
  replyersIds: [String] 
  replyers: [User] 
  pagePath: String 
  pageUrl: String 
  replies(limit: Int = 5): [Reply] 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  lastReplyedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteTicketInput{
  filter: TicketFilterInput
  id: String
}

input SingleTicketInput {
  # filtering
  filter: TicketFilterInput
  sort: TicketSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: TicketSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiTicketInput {

  # filtering
  filter: TicketFilterInput
  sort: TicketSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleTicketOutput{
  result: Ticket
}

type  MultiTicketOutput{
  results: [Ticket]
  totalCount: Int
}

type TicketMutationOutput{
  data: Ticket
}

input CreateTicketInput {
  data: CreateTicketDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateTicketDataInput {
  subject: String 
  body: String 
  thumbnailUrl: String 
  userId: String 
  departmentsIds: [String] 
}

input UpdateTicketInput{
  filter: TicketFilterInput
  id: String
  data: UpdateTicketDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertTicketInput{
  filter: TicketFilterInput
  id: String
  data: UpdateTicketDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateTicketDataInput {
  subject: String 
  body: String 
  thumbnailUrl: String 
  departmentsIds: [String] 
}

input TicketFilterInput {
  _and: [TicketFilterInput]
  _not: TicketFilterInput
  _or: [TicketFilterInput]
  _byDepartment: TicketByDepartmentFilterInput

  _id: String_Selector
  createdAt: Date_Selector
  subject: String_Selector
  slug: String_Selector
  body: String_Selector
  htmlBody: String_Selector
  thumbnailUrl: String_Selector
  lastReplyedAt: Date_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  departmentsIds: String_Array_Selector
  replyCount: Float_Selector
  replyersIds: String_Array_Selector
  pagePath: String_Selector
  pageUrl: String_Selector



  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
}

input TicketByDepartmentFilterInput{
  slug: String
}

input TicketSortInput {
  _id: SortOptions
  createdAt: SortOptions
  subject: SortOptions
  slug: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  thumbnailUrl: SortOptions
  lastReplyedAt: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  departmentsIds: SortOptions
  replyCount: SortOptions
  replyersIds: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  replies: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input TicketSelectorInput {
  _and: [TicketSelectorInput]
  _or: [TicketSelectorInput]

}

input TicketSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Replies
type Reply {
  _id: String 
  parentReplyId: String 
  parentReply: Reply 
  topLevelReplyId: String 
  topLevelReply: Reply 
  createdAt: Date 
  postedAt: Date 
  body: String 
  htmlBody: String 
  author: String 
  ticketId: String 
  ticket: Ticket 
  userId: String 
  user: User 
  isDeleted: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  pagePath: String 
  pageUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  postedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteReplyInput{
  filter: ReplyFilterInput
  id: String
}

input SingleReplyInput {
  # filtering
  filter: ReplyFilterInput
  sort: ReplySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: ReplySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiReplyInput {

  # filtering
  filter: ReplyFilterInput
  sort: ReplySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleReplyOutput{
  result: Reply
}

type  MultiReplyOutput{
  results: [Reply]
  totalCount: Int
}

type ReplyMutationOutput{
  data: Reply
}

input CreateReplyInput {
  data: CreateReplyDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateReplyDataInput {
  parentReplyId: String 
  topLevelReplyId: String 
  body: String 
  ticketId: String 
  userId: String 
}

input UpdateReplyInput{
  filter: ReplyFilterInput
  id: String
  data: UpdateReplyDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertReplyInput{
  filter: ReplyFilterInput
  id: String
  data: UpdateReplyDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateReplyDataInput {
  body: String 
}

input ReplyFilterInput {
  _and: [ReplyFilterInput]
  _not: ReplyFilterInput
  _or: [ReplyFilterInput]


  _id: String_Selector
  parentReplyId: String_Selector
  topLevelReplyId: String_Selector
  createdAt: Date_Selector
  postedAt: Date_Selector
  body: String_Selector
  htmlBody: String_Selector
  author: String_Selector
  ticketId: String_Selector
  userId: String_Selector
  isDeleted: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector


  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
}

input ReplySortInput {
  _id: SortOptions
  parentReplyId: SortOptions
  topLevelReplyId: SortOptions
  createdAt: SortOptions
  postedAt: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  author: SortOptions
  ticketId: SortOptions
  userId: SortOptions
  isDeleted: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input ReplySelectorInput {
  _and: [ReplySelectorInput]
  _or: [ReplySelectorInput]

}

input ReplySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Pages
type Page {
  _id: String 
  createdAt: Date 
  seoTitle: String 
  seoDescription: String 
  title: String 
  slug: String 
  heroTitle: String 
  heroDescription: String 
  outlineBtn: String 
  outlineBtnUrl: String 
  fillBtn: String 
  fillBtnUrl: String 
  heroForm: Boolean 
  thumbnailUrl: String 
  body: String 
  viewCount: Float 
  clickCount: Float 
  status: Float 
  postedAt: Date 
  postedAtFormatted: String 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  featuresIds: [String] 
  features: [Feature] 
  pagePath: String 
  pageUrl: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeletePageInput{
  filter: PageFilterInput
  id: String
}

input SinglePageInput {
  # filtering
  filter: PageFilterInput
  sort: PageSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PageSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiPageInput {

  # filtering
  filter: PageFilterInput
  sort: PageSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SinglePageOutput{
  result: Page
}

type  MultiPageOutput{
  results: [Page]
  totalCount: Int
}

type PageMutationOutput{
  data: Page
}

input CreatePageInput {
  data: CreatePageDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreatePageDataInput {
  seoTitle: String 
  seoDescription: String 
  title: String 
  heroTitle: String 
  heroDescription: String 
  outlineBtn: String 
  outlineBtnUrl: String 
  fillBtn: String 
  fillBtnUrl: String 
  heroForm: Boolean 
  thumbnailUrl: String 
  body: String 
  status: Float 
  postedAt: Date 
  userId: String 
  featuresIds: [String] 
}

input UpdatePageInput{
  filter: PageFilterInput
  id: String
  data: UpdatePageDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertPageInput{
  filter: PageFilterInput
  id: String
  data: UpdatePageDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdatePageDataInput {
  seoTitle: String 
  seoDescription: String 
  title: String 
  heroTitle: String 
  heroDescription: String 
  outlineBtn: String 
  outlineBtnUrl: String 
  fillBtn: String 
  fillBtnUrl: String 
  heroForm: Boolean 
  thumbnailUrl: String 
  body: String 
  status: Float 
  postedAt: Date 
  featuresIds: [String] 
}

input PageFilterInput {
  _and: [PageFilterInput]
  _not: PageFilterInput
  _or: [PageFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  seoTitle: String_Selector
  seoDescription: String_Selector
  title: String_Selector
  slug: String_Selector
  heroTitle: String_Selector
  heroDescription: String_Selector
  outlineBtn: String_Selector
  outlineBtnUrl: String_Selector
  fillBtn: String_Selector
  fillBtnUrl: String_Selector
  heroForm: Boolean_Selector
  thumbnailUrl: String_Selector
  body: String_Selector
  viewCount: Float_Selector
  clickCount: Float_Selector
  status: Float_Selector
  postedAt: Date_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  featuresIds: String_Array_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input PageSortInput {
  _id: SortOptions
  createdAt: SortOptions
  seoTitle: SortOptions
  seoDescription: SortOptions
  title: SortOptions
  slug: SortOptions
  heroTitle: SortOptions
  heroDescription: SortOptions
  outlineBtn: SortOptions
  outlineBtnUrl: SortOptions
  fillBtn: SortOptions
  fillBtnUrl: SortOptions
  heroForm: SortOptions
  thumbnailUrl: SortOptions
  body: SortOptions
  viewCount: SortOptions
  clickCount: SortOptions
  status: SortOptions
  postedAt: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  featuresIds: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input PageSelectorInput {
  _and: [PageSelectorInput]
  _or: [PageSelectorInput]

}

input PageSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Instances
type Instance {
  _id: String 
  createdAt: Date 
  instanceId: String 
  type: String 
  cpu: String 
  image: String 
  label: String 
  ram: String 
  region: String 
  storage: String 
  transfer: String 
  status: String 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  priceHr: String 
  priceMo: String 
  backupPriceHr: String 
  backupPriceMo: String 
  backupEnabled: Boolean 
  backupCancelledAt: String 
  pagePath: String 
  pageUrl: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteInstanceInput{
  filter: InstanceFilterInput
  id: String
}

input SingleInstanceInput {
  # filtering
  filter: InstanceFilterInput
  sort: InstanceSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: InstanceSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiInstanceInput {

  # filtering
  filter: InstanceFilterInput
  sort: InstanceSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleInstanceOutput{
  result: Instance
}

type  MultiInstanceOutput{
  results: [Instance]
  totalCount: Int
}

type InstanceMutationOutput{
  data: Instance
}

input CreateInstanceInput {
  data: CreateInstanceDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateInstanceDataInput {
  instanceId: String 
  type: String 
  cpu: String 
  image: String 
  label: String 
  ram: String 
  region: String 
  storage: String 
  transfer: String 
  status: String 
  userId: String 
  priceHr: String 
  priceMo: String 
  backupPriceHr: String 
  backupPriceMo: String 
  backupEnabled: Boolean 
  backupCancelledAt: String 
}

input UpdateInstanceInput{
  filter: InstanceFilterInput
  id: String
  data: UpdateInstanceDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertInstanceInput{
  filter: InstanceFilterInput
  id: String
  data: UpdateInstanceDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateInstanceDataInput {
  instanceId: String 
  type: String 
  cpu: String 
  image: String 
  label: String 
  ram: String 
  region: String 
  storage: String 
  transfer: String 
  status: String 
  priceHr: String 
  priceMo: String 
  backupPriceHr: String 
  backupPriceMo: String 
  backupEnabled: Boolean 
  backupCancelledAt: String 
}

input InstanceFilterInput {
  _and: [InstanceFilterInput]
  _not: InstanceFilterInput
  _or: [InstanceFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  instanceId: String_Selector
  type: String_Selector
  cpu: String_Selector
  image: String_Selector
  label: String_Selector
  ram: String_Selector
  region: String_Selector
  storage: String_Selector
  transfer: String_Selector
  status: String_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  priceHr: String_Selector
  priceMo: String_Selector
  backupPriceHr: String_Selector
  backupPriceMo: String_Selector
  backupEnabled: Boolean_Selector
  backupCancelledAt: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input InstanceSortInput {
  _id: SortOptions
  createdAt: SortOptions
  instanceId: SortOptions
  type: SortOptions
  cpu: SortOptions
  image: SortOptions
  label: SortOptions
  ram: SortOptions
  region: SortOptions
  storage: SortOptions
  transfer: SortOptions
  status: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  priceHr: SortOptions
  priceMo: SortOptions
  backupPriceHr: SortOptions
  backupPriceMo: SortOptions
  backupEnabled: SortOptions
  backupCancelledAt: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input InstanceSelectorInput {
  _and: [InstanceSelectorInput]
  _or: [InstanceSelectorInput]

}

input InstanceSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Domains
type Domain {
  _id: String 
  createdAt: Date 
  name: String 
  domainId: Float 
  status: String 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  pagePath: String 
  pageUrl: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteDomainInput{
  filter: DomainFilterInput
  id: String
}

input SingleDomainInput {
  # filtering
  filter: DomainFilterInput
  sort: DomainSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: DomainSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiDomainInput {

  # filtering
  filter: DomainFilterInput
  sort: DomainSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleDomainOutput{
  result: Domain
}

type  MultiDomainOutput{
  results: [Domain]
  totalCount: Int
}

type DomainMutationOutput{
  data: Domain
}

input CreateDomainInput {
  data: CreateDomainDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateDomainDataInput {
  name: String 
  domainId: Float 
  status: String 
  userId: String 
}

input UpdateDomainInput{
  filter: DomainFilterInput
  id: String
  data: UpdateDomainDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertDomainInput{
  filter: DomainFilterInput
  id: String
  data: UpdateDomainDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateDomainDataInput {
  name: String 
  domainId: Float 
  status: String 
}

input DomainFilterInput {
  _and: [DomainFilterInput]
  _not: DomainFilterInput
  _or: [DomainFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  domainId: Float_Selector
  status: String_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input DomainSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  domainId: SortOptions
  status: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input DomainSelectorInput {
  _and: [DomainSelectorInput]
  _or: [DomainSelectorInput]

}

input DomainSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Events
type Event {
  _id: String 
  createdAt: Date 
  name: String 
  userId: String 
  user: User 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteEventInput{
  filter: EventFilterInput
  id: String
}

input SingleEventInput {
  # filtering
  filter: EventFilterInput
  sort: EventSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: EventSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiEventInput {

  # filtering
  filter: EventFilterInput
  sort: EventSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleEventOutput{
  result: Event
}

type  MultiEventOutput{
  results: [Event]
  totalCount: Int
}

type EventMutationOutput{
  data: Event
}

input CreateEventInput {
  data: CreateEventDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateEventDataInput {
  name: String 
  userId: String 
}

input UpdateEventInput{
  filter: EventFilterInput
  id: String
  data: UpdateEventDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertEventInput{
  filter: EventFilterInput
  id: String
  data: UpdateEventDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateEventDataInput {
  name: String 
}

input EventFilterInput {
  _and: [EventFilterInput]
  _not: EventFilterInput
  _or: [EventFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  name: String_Selector
  userId: String_Selector
}

input EventSortInput {
  _id: SortOptions
  createdAt: SortOptions
  name: SortOptions
  userId: SortOptions
}

input EventSelectorInput {
  _and: [EventSelectorInput]
  _or: [EventSelectorInput]

}

input EventSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Categories
type Category {
  _id: String 
  name: String 
  slug: String 
  pagePath: String 
  pageUrl: String 
}


input DeleteCategoryInput{
  filter: CategoryFilterInput
  id: String
}

input SingleCategoryInput {
  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CategorySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCategoryInput {

  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCategoryOutput{
  result: Category
}

type  MultiCategoryOutput{
  results: [Category]
  totalCount: Int
}

type CategoryMutationOutput{
  data: Category
}

input CreateCategoryInput {
  data: CreateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateCategoryDataInput {
  name: String 
  slug: String 
}

input UpdateCategoryInput{
  filter: CategoryFilterInput
  id: String
  data: UpdateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertCategoryInput{
  filter: CategoryFilterInput
  id: String
  data: UpdateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateCategoryDataInput {
  name: String 
  slug: String 
}

input CategoryFilterInput {
  _and: [CategoryFilterInput]
  _not: CategoryFilterInput
  _or: [CategoryFilterInput]


  _id: String_Selector
  name: String_Selector
  slug: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input CategorySortInput {
  _id: SortOptions
  name: SortOptions
  slug: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input CategorySelectorInput {
  _and: [CategorySelectorInput]
  _or: [CategorySelectorInput]

}

input CategorySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Departments
type Department {
  _id: String 
  name: String 
  slug: String 
  pagePath: String 
  pageUrl: String 
}


input DeleteDepartmentInput{
  filter: DepartmentFilterInput
  id: String
}

input SingleDepartmentInput {
  # filtering
  filter: DepartmentFilterInput
  sort: DepartmentSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: DepartmentSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiDepartmentInput {

  # filtering
  filter: DepartmentFilterInput
  sort: DepartmentSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleDepartmentOutput{
  result: Department
}

type  MultiDepartmentOutput{
  results: [Department]
  totalCount: Int
}

type DepartmentMutationOutput{
  data: Department
}

input CreateDepartmentInput {
  data: CreateDepartmentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateDepartmentDataInput {
  name: String 
  slug: String 
}

input UpdateDepartmentInput{
  filter: DepartmentFilterInput
  id: String
  data: UpdateDepartmentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertDepartmentInput{
  filter: DepartmentFilterInput
  id: String
  data: UpdateDepartmentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateDepartmentDataInput {
  name: String 
  slug: String 
}

input DepartmentFilterInput {
  _and: [DepartmentFilterInput]
  _not: DepartmentFilterInput
  _or: [DepartmentFilterInput]


  _id: String_Selector
  name: String_Selector
  slug: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input DepartmentSortInput {
  _id: SortOptions
  name: SortOptions
  slug: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input DepartmentSelectorInput {
  _and: [DepartmentSelectorInput]
  _or: [DepartmentSelectorInput]

}

input DepartmentSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Features
type Feature {
  _id: String 
  name: String 
  slug: String 
  order: Float 
  pagePath: String 
  pageUrl: String 
}


input DeleteFeatureInput{
  filter: FeatureFilterInput
  id: String
}

input SingleFeatureInput {
  # filtering
  filter: FeatureFilterInput
  sort: FeatureSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: FeatureSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiFeatureInput {

  # filtering
  filter: FeatureFilterInput
  sort: FeatureSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleFeatureOutput{
  result: Feature
}

type  MultiFeatureOutput{
  results: [Feature]
  totalCount: Int
}

type FeatureMutationOutput{
  data: Feature
}

input CreateFeatureInput {
  data: CreateFeatureDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateFeatureDataInput {
  name: String 
  slug: String 
  order: Float 
}

input UpdateFeatureInput{
  filter: FeatureFilterInput
  id: String
  data: UpdateFeatureDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertFeatureInput{
  filter: FeatureFilterInput
  id: String
  data: UpdateFeatureDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateFeatureDataInput {
  name: String 
  slug: String 
  order: Float 
}

input FeatureFilterInput {
  _and: [FeatureFilterInput]
  _not: FeatureFilterInput
  _or: [FeatureFilterInput]


  _id: String_Selector
  name: String_Selector
  slug: String_Selector
  order: Float_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input FeatureSortInput {
  _id: SortOptions
  name: SortOptions
  slug: SortOptions
  order: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input FeatureSelectorInput {
  _and: [FeatureSelectorInput]
  _or: [FeatureSelectorInput]

}

input FeatureSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Distributions
type Distribution {
  _id: String 
  createdAt: Date 
  # Example: "linode/centos7"
  distId: String 
  # Example: "CentOS 7"
  label: String 
  # Example: "CentOS"
  vendor: String 
  image: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteDistributionInput{
  filter: DistributionFilterInput
  id: String
}

input SingleDistributionInput {
  # filtering
  filter: DistributionFilterInput
  sort: DistributionSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: DistributionSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiDistributionInput {

  # filtering
  filter: DistributionFilterInput
  sort: DistributionSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleDistributionOutput{
  result: Distribution
}

type  MultiDistributionOutput{
  results: [Distribution]
  totalCount: Int
}

type DistributionMutationOutput{
  data: Distribution
}

input CreateDistributionInput {
  data: CreateDistributionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateDistributionDataInput {
  distId: String 
  label: String 
  vendor: String 
}

input UpdateDistributionInput{
  filter: DistributionFilterInput
  id: String
  data: UpdateDistributionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertDistributionInput{
  filter: DistributionFilterInput
  id: String
  data: UpdateDistributionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateDistributionDataInput {
  distId: String 
  label: String 
  vendor: String 
}

input DistributionFilterInput {
  _and: [DistributionFilterInput]
  _not: DistributionFilterInput
  _or: [DistributionFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  distId: String_Selector
  label: String_Selector
  vendor: String_Selector
  image: String_Selector
}

input DistributionSortInput {
  _id: SortOptions
  createdAt: SortOptions
  distId: SortOptions
  label: SortOptions
  vendor: SortOptions
  image: SortOptions
}

input DistributionSelectorInput {
  _and: [DistributionSelectorInput]
  _or: [DistributionSelectorInput]

}

input DistributionSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Regions
type Region {
  _id: String 
  createdAt: Date 
  # Example: "ap-west"
  regionId: String 
  # Example: "Asia Pacific"
  region: String 
  # Example: "in"
  countryId: String 
  # Example: "India"
  country: String 
  # Example: "Mumbai"
  city: String 
  capabilities: [String] 
  image: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteRegionInput{
  filter: RegionFilterInput
  id: String
}

input SingleRegionInput {
  # filtering
  filter: RegionFilterInput
  sort: RegionSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: RegionSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiRegionInput {

  # filtering
  filter: RegionFilterInput
  sort: RegionSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleRegionOutput{
  result: Region
}

type  MultiRegionOutput{
  results: [Region]
  totalCount: Int
}

type RegionMutationOutput{
  data: Region
}

input CreateRegionInput {
  data: CreateRegionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateRegionDataInput {
  regionId: String 
  region: String 
  countryId: String 
  country: String 
  city: String 
  capabilities: [String] 
  image: String 
}

input UpdateRegionInput{
  filter: RegionFilterInput
  id: String
  data: UpdateRegionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertRegionInput{
  filter: RegionFilterInput
  id: String
  data: UpdateRegionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateRegionDataInput {
  regionId: String 
  region: String 
  countryId: String 
  country: String 
  city: String 
  capabilities: [String] 
  image: String 
}

input RegionFilterInput {
  _and: [RegionFilterInput]
  _not: RegionFilterInput
  _or: [RegionFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  regionId: String_Selector
  region: String_Selector
  countryId: String_Selector
  country: String_Selector
  city: String_Selector
  capabilities: String_Array_Selector
  image: String_Selector
}

input RegionSortInput {
  _id: SortOptions
  createdAt: SortOptions
  regionId: SortOptions
  region: SortOptions
  countryId: SortOptions
  country: SortOptions
  city: SortOptions
  capabilities: SortOptions
  image: SortOptions
}

input RegionSelectorInput {
  _and: [RegionSelectorInput]
  _or: [RegionSelectorInput]

}

input RegionSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Plans
type Plan {
  _id: String 
  createdAt: Date 
  planId: String 
  label: String 
  priceHr: String 
  priceMo: String 
  sellPriceHr: String 
  sellPriceMo: String 
  memory: String 
  disk: String 
  transfer: String 
  vcpu: String 
  class: String 
  addons: [String] 
  addonBackupHr: String 
  addonBackupMo: String 
  sellAddonBackupHr: String 
  sellAddonBackupMo: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeletePlanInput{
  filter: PlanFilterInput
  id: String
}

input SinglePlanInput {
  # filtering
  filter: PlanFilterInput
  sort: PlanSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PlanSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiPlanInput {

  # filtering
  filter: PlanFilterInput
  sort: PlanSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SinglePlanOutput{
  result: Plan
}

type  MultiPlanOutput{
  results: [Plan]
  totalCount: Int
}

type PlanMutationOutput{
  data: Plan
}

input CreatePlanInput {
  data: CreatePlanDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreatePlanDataInput {
  planId: String 
  label: String 
  priceHr: String 
  priceMo: String 
  sellPriceHr: String 
  memory: String 
  disk: String 
  transfer: String 
  vcpu: String 
  class: String 
  addons: [String] 
  addonBackupHr: String 
  addonBackupMo: String 
  sellAddonBackupHr: String 
}

input UpdatePlanInput{
  filter: PlanFilterInput
  id: String
  data: UpdatePlanDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertPlanInput{
  filter: PlanFilterInput
  id: String
  data: UpdatePlanDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdatePlanDataInput {
  planId: String 
  label: String 
  priceHr: String 
  priceMo: String 
  sellPriceHr: String 
  memory: String 
  disk: String 
  transfer: String 
  vcpu: String 
  class: String 
  addons: [String] 
  addonBackupHr: String 
  addonBackupMo: String 
  sellAddonBackupHr: String 
}

input PlanFilterInput {
  _and: [PlanFilterInput]
  _not: PlanFilterInput
  _or: [PlanFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  planId: String_Selector
  label: String_Selector
  priceHr: String_Selector
  priceMo: String_Selector
  sellPriceHr: String_Selector
  sellPriceMo: String_Selector
  memory: String_Selector
  disk: String_Selector
  transfer: String_Selector
  vcpu: String_Selector
  class: String_Selector
  addons: String_Array_Selector
  addonBackupHr: String_Selector
  addonBackupMo: String_Selector
  sellAddonBackupHr: String_Selector
  sellAddonBackupMo: String_Selector
}

input PlanSortInput {
  _id: SortOptions
  createdAt: SortOptions
  planId: SortOptions
  label: SortOptions
  priceHr: SortOptions
  priceMo: SortOptions
  sellPriceHr: SortOptions
  sellPriceMo: SortOptions
  memory: SortOptions
  disk: SortOptions
  transfer: SortOptions
  vcpu: SortOptions
  class: SortOptions
  addons: SortOptions
  addonBackupHr: SortOptions
  addonBackupMo: SortOptions
  sellAddonBackupHr: SortOptions
  sellAddonBackupMo: SortOptions
}

input PlanSelectorInput {
  _and: [PlanSelectorInput]
  _or: [PlanSelectorInput]

}

input PlanSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Apps
type App {
  _id: String 
  createdAt: Date 
  # Example: "123456"
  distId: String 
  # Example: "linode/debian10"
  typeId: String 
  # Example: "WordPress - Latest"
  label: String 
  # Example: "#!/bin/bash....."
  script: String 
  # Example: "linode"
  username: String 
  # Example: "/images/wordpress/png"
  image: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteAppInput{
  filter: AppFilterInput
  id: String
}

input SingleAppInput {
  # filtering
  filter: AppFilterInput
  sort: AppSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: AppSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiAppInput {

  # filtering
  filter: AppFilterInput
  sort: AppSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleAppOutput{
  result: App
}

type  MultiAppOutput{
  results: [App]
  totalCount: Int
}

type AppMutationOutput{
  data: App
}

input CreateAppInput {
  data: CreateAppDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateAppDataInput {
  distId: String 
  typeId: String 
  label: String 
  script: String 
  username: String 
  image: String 
}

input UpdateAppInput{
  filter: AppFilterInput
  id: String
  data: UpdateAppDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertAppInput{
  filter: AppFilterInput
  id: String
  data: UpdateAppDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateAppDataInput {
  distId: String 
  typeId: String 
  label: String 
  script: String 
  username: String 
  image: String 
}

input AppFilterInput {
  _and: [AppFilterInput]
  _not: AppFilterInput
  _or: [AppFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  distId: String_Selector
  typeId: String_Selector
  label: String_Selector
  script: String_Selector
  username: String_Selector
  image: String_Selector
}

input AppSortInput {
  _id: SortOptions
  createdAt: SortOptions
  distId: SortOptions
  typeId: SortOptions
  label: SortOptions
  script: SortOptions
  username: SortOptions
  image: SortOptions
}

input AppSelectorInput {
  _and: [AppSelectorInput]
  _or: [AppSelectorInput]

}

input AppSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Backups
type Backup {
  _id: String 
  backupId: String 
}


input DeleteBackupInput{
  filter: BackupFilterInput
  id: String
}

input SingleBackupInput {
  # filtering
  filter: BackupFilterInput
  sort: BackupSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: BackupSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiBackupInput {

  # filtering
  filter: BackupFilterInput
  sort: BackupSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleBackupOutput{
  result: Backup
}

type  MultiBackupOutput{
  results: [Backup]
  totalCount: Int
}

type BackupMutationOutput{
  data: Backup
}

input CreateBackupInput {
  data: CreateBackupDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateBackupDataInput {
  backupId: String 
}

input UpdateBackupInput{
  filter: BackupFilterInput
  id: String
  data: UpdateBackupDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertBackupInput{
  filter: BackupFilterInput
  id: String
  data: UpdateBackupDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateBackupDataInput {
  backupId: String 
}

input BackupFilterInput {
  _and: [BackupFilterInput]
  _not: BackupFilterInput
  _or: [BackupFilterInput]


  _id: String_Selector
  backupId: String_Selector
}

input BackupSortInput {
  _id: SortOptions
  backupId: SortOptions
}

input BackupSelectorInput {
  _and: [BackupSelectorInput]
  _or: [BackupSelectorInput]

}

input BackupSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  siteData: Site
  
  currentUser: User
  
  getDatabaseObject(id: String): JSON
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  emails(input: MultiEmailInput):  MultiEmailOutput
  
  settings(input: MultiSettingInput):  MultiSettingOutput
  
  callbacks(input: MultiCallbackInput):  MultiCallbackOutput
  
  # A single Post document fetched by ID or slug
  post(input: SinglePostInput!): SinglePostOutput
  
  # A list of Post documents matching a set of query terms
  posts(input: MultiPostInput):  MultiPostOutput
  
  # A single Comment document fetched by ID or slug
  comment(input: SingleCommentInput!): SingleCommentOutput
  
  # A list of Comment documents matching a set of query terms
  comments(input: MultiCommentInput):  MultiCommentOutput
  
  # A single Ticket document fetched by ID or slug
  ticket(input: SingleTicketInput!): SingleTicketOutput
  
  # A list of Ticket documents matching a set of query terms
  tickets(input: MultiTicketInput):  MultiTicketOutput
  
  # A single Reply document fetched by ID or slug
  reply(input: SingleReplyInput!): SingleReplyOutput
  
  # A list of Reply documents matching a set of query terms
  replies(input: MultiReplyInput):  MultiReplyOutput
  
  # A single Page document fetched by ID or slug
  page(input: SinglePageInput!): SinglePageOutput
  
  # A list of Page documents matching a set of query terms
  pages(input: MultiPageInput):  MultiPageOutput
  
  # A single Instance document fetched by ID or slug
  instance(input: SingleInstanceInput!): SingleInstanceOutput
  
  # A list of Instance documents matching a set of query terms
  instances(input: MultiInstanceInput):  MultiInstanceOutput
  
  # A single Domain document fetched by ID or slug
  domain(input: SingleDomainInput!): SingleDomainOutput
  
  # A list of Domain documents matching a set of query terms
  domains(input: MultiDomainInput):  MultiDomainOutput
  
  # A single Event document fetched by ID or slug
  event(input: SingleEventInput!): SingleEventOutput
  
  # A list of Event documents matching a set of query terms
  events(input: MultiEventInput):  MultiEventOutput
  
  # A single Category document fetched by ID or slug
  category(input: SingleCategoryInput!): SingleCategoryOutput
  
  # A list of Category documents matching a set of query terms
  categories(input: MultiCategoryInput):  MultiCategoryOutput
  
  # A single Department document fetched by ID or slug
  department(input: SingleDepartmentInput!): SingleDepartmentOutput
  
  # A list of Department documents matching a set of query terms
  departments(input: MultiDepartmentInput):  MultiDepartmentOutput
  
  # A single Feature document fetched by ID or slug
  feature(input: SingleFeatureInput!): SingleFeatureOutput
  
  # A list of Feature documents matching a set of query terms
  features(input: MultiFeatureInput):  MultiFeatureOutput
  
  # A single Distribution document fetched by ID or slug
  distribution(input: SingleDistributionInput!): SingleDistributionOutput
  
  # A list of Distribution documents matching a set of query terms
  distributions(input: MultiDistributionInput):  MultiDistributionOutput
  
  # A single Region document fetched by ID or slug
  region(input: SingleRegionInput!): SingleRegionOutput
  
  # A list of Region documents matching a set of query terms
  regions(input: MultiRegionInput):  MultiRegionOutput
  
  # A single Plan document fetched by ID or slug
  plan(input: SinglePlanInput!): SinglePlanOutput
  
  # A list of Plan documents matching a set of query terms
  plans(input: MultiPlanInput):  MultiPlanOutput
  
  # A single App document fetched by ID or slug
  app(input: SingleAppInput!): SingleAppOutput
  
  # A list of App documents matching a set of query terms
  apps(input: MultiAppInput):  MultiAppOutput
  
  # A single Backup document fetched by ID or slug
  backup(input: SingleBackupInput!): SingleBackupOutput
  
  # A list of Backup documents matching a set of query terms
  backups(input: MultiBackupInput):  MultiBackupOutput
  
}
  

type Mutation {
  authenticateWithPassword(input: AuthPasswordInput): AuthResult

  logout: LogoutResult

  signup(input: SignupInput): SignupResult

  setPassword(input: SetPasswordInput): AuthResult

  sendResetPasswordEmail(input: AuthEmailInput): Boolean

  resetPassword(input: ResetPasswordInput): ResetPasswordResult

  sendVerificationEmail(input: AuthEmailInput): Boolean

  verifyEmail(input: VerifyEmailInput): VerifyEmailResult

  testEmail(emailName: String) : EmailResponse

  vote(documentId: String, voteType: String, collectionName: String, voteId: String) : Voteable

  increasePostViewCount(postId: String): Float

  increaseTicketViewCount(ticketId: String): Float

  getInstancesData(dataMutation: JSON) : JSON

  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new Post documents
  createPost(
  input: CreatePostInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePostDataInput
) : PostMutationOutput

  # Mutation for updating a Post document
  updatePost(
  input: UpdatePostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePostDataInput 
) : PostMutationOutput

  # Mutation for upserting a Post document
  upsertPost(
  input: UpsertPostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePostDataInput
) : PostMutationOutput

  # Mutation for deleting a Post document
  deletePost(
  input: DeletePostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput
) : PostMutationOutput

  # Mutation for creating new Comment documents
  createComment(
  input: CreateCommentInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCommentDataInput
) : CommentMutationOutput

  # Mutation for updating a Comment document
  updateComment(
  input: UpdateCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCommentDataInput 
) : CommentMutationOutput

  # Mutation for upserting a Comment document
  upsertComment(
  input: UpsertCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCommentDataInput
) : CommentMutationOutput

  # Mutation for deleting a Comment document
  deleteComment(
  input: DeleteCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput
) : CommentMutationOutput

  # Mutation for creating new Ticket documents
  createTicket(
  input: CreateTicketInput,
  "Deprecated (use 'input' field instead)."
  data: CreateTicketDataInput
) : TicketMutationOutput

  # Mutation for updating a Ticket document
  updateTicket(
  input: UpdateTicketInput,
  "Deprecated (use 'input' field instead)."
  selector: TicketSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateTicketDataInput 
) : TicketMutationOutput

  # Mutation for upserting a Ticket document
  upsertTicket(
  input: UpsertTicketInput,
  "Deprecated (use 'input' field instead)."
  selector: TicketSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateTicketDataInput
) : TicketMutationOutput

  # Mutation for deleting a Ticket document
  deleteTicket(
  input: DeleteTicketInput,
  "Deprecated (use 'input' field instead)."
  selector: TicketSelectorUniqueInput
) : TicketMutationOutput

  # Mutation for creating new Reply documents
  createReply(
  input: CreateReplyInput,
  "Deprecated (use 'input' field instead)."
  data: CreateReplyDataInput
) : ReplyMutationOutput

  # Mutation for updating a Reply document
  updateReply(
  input: UpdateReplyInput,
  "Deprecated (use 'input' field instead)."
  selector: ReplySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateReplyDataInput 
) : ReplyMutationOutput

  # Mutation for upserting a Reply document
  upsertReply(
  input: UpsertReplyInput,
  "Deprecated (use 'input' field instead)."
  selector: ReplySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateReplyDataInput
) : ReplyMutationOutput

  # Mutation for deleting a Reply document
  deleteReply(
  input: DeleteReplyInput,
  "Deprecated (use 'input' field instead)."
  selector: ReplySelectorUniqueInput
) : ReplyMutationOutput

  # Mutation for creating new Page documents
  createPage(
  input: CreatePageInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePageDataInput
) : PageMutationOutput

  # Mutation for updating a Page document
  updatePage(
  input: UpdatePageInput,
  "Deprecated (use 'input' field instead)."
  selector: PageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePageDataInput 
) : PageMutationOutput

  # Mutation for upserting a Page document
  upsertPage(
  input: UpsertPageInput,
  "Deprecated (use 'input' field instead)."
  selector: PageSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePageDataInput
) : PageMutationOutput

  # Mutation for deleting a Page document
  deletePage(
  input: DeletePageInput,
  "Deprecated (use 'input' field instead)."
  selector: PageSelectorUniqueInput
) : PageMutationOutput

  # Mutation for creating new Instance documents
  createInstance(
  input: CreateInstanceInput,
  "Deprecated (use 'input' field instead)."
  data: CreateInstanceDataInput
) : InstanceMutationOutput

  # Mutation for updating a Instance document
  updateInstance(
  input: UpdateInstanceInput,
  "Deprecated (use 'input' field instead)."
  selector: InstanceSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateInstanceDataInput 
) : InstanceMutationOutput

  # Mutation for upserting a Instance document
  upsertInstance(
  input: UpsertInstanceInput,
  "Deprecated (use 'input' field instead)."
  selector: InstanceSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateInstanceDataInput
) : InstanceMutationOutput

  # Mutation for deleting a Instance document
  deleteInstance(
  input: DeleteInstanceInput,
  "Deprecated (use 'input' field instead)."
  selector: InstanceSelectorUniqueInput
) : InstanceMutationOutput

  # Mutation for creating new Domain documents
  createDomain(
  input: CreateDomainInput,
  "Deprecated (use 'input' field instead)."
  data: CreateDomainDataInput
) : DomainMutationOutput

  # Mutation for updating a Domain document
  updateDomain(
  input: UpdateDomainInput,
  "Deprecated (use 'input' field instead)."
  selector: DomainSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDomainDataInput 
) : DomainMutationOutput

  # Mutation for upserting a Domain document
  upsertDomain(
  input: UpsertDomainInput,
  "Deprecated (use 'input' field instead)."
  selector: DomainSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDomainDataInput
) : DomainMutationOutput

  # Mutation for deleting a Domain document
  deleteDomain(
  input: DeleteDomainInput,
  "Deprecated (use 'input' field instead)."
  selector: DomainSelectorUniqueInput
) : DomainMutationOutput

  # Mutation for creating new Event documents
  createEvent(
  input: CreateEventInput,
  "Deprecated (use 'input' field instead)."
  data: CreateEventDataInput
) : EventMutationOutput

  # Mutation for updating a Event document
  updateEvent(
  input: UpdateEventInput,
  "Deprecated (use 'input' field instead)."
  selector: EventSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateEventDataInput 
) : EventMutationOutput

  # Mutation for upserting a Event document
  upsertEvent(
  input: UpsertEventInput,
  "Deprecated (use 'input' field instead)."
  selector: EventSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateEventDataInput
) : EventMutationOutput

  # Mutation for deleting a Event document
  deleteEvent(
  input: DeleteEventInput,
  "Deprecated (use 'input' field instead)."
  selector: EventSelectorUniqueInput
) : EventMutationOutput

  # Mutation for creating new Category documents
  createCategory(
  input: CreateCategoryInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCategoryDataInput
) : CategoryMutationOutput

  # Mutation for updating a Category document
  updateCategory(
  input: UpdateCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCategoryDataInput 
) : CategoryMutationOutput

  # Mutation for upserting a Category document
  upsertCategory(
  input: UpsertCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCategoryDataInput
) : CategoryMutationOutput

  # Mutation for deleting a Category document
  deleteCategory(
  input: DeleteCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput
) : CategoryMutationOutput

  # Mutation for creating new Department documents
  createDepartment(
  input: CreateDepartmentInput,
  "Deprecated (use 'input' field instead)."
  data: CreateDepartmentDataInput
) : DepartmentMutationOutput

  # Mutation for updating a Department document
  updateDepartment(
  input: UpdateDepartmentInput,
  "Deprecated (use 'input' field instead)."
  selector: DepartmentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDepartmentDataInput 
) : DepartmentMutationOutput

  # Mutation for upserting a Department document
  upsertDepartment(
  input: UpsertDepartmentInput,
  "Deprecated (use 'input' field instead)."
  selector: DepartmentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDepartmentDataInput
) : DepartmentMutationOutput

  # Mutation for deleting a Department document
  deleteDepartment(
  input: DeleteDepartmentInput,
  "Deprecated (use 'input' field instead)."
  selector: DepartmentSelectorUniqueInput
) : DepartmentMutationOutput

  # Mutation for creating new Feature documents
  createFeature(
  input: CreateFeatureInput,
  "Deprecated (use 'input' field instead)."
  data: CreateFeatureDataInput
) : FeatureMutationOutput

  # Mutation for updating a Feature document
  updateFeature(
  input: UpdateFeatureInput,
  "Deprecated (use 'input' field instead)."
  selector: FeatureSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateFeatureDataInput 
) : FeatureMutationOutput

  # Mutation for upserting a Feature document
  upsertFeature(
  input: UpsertFeatureInput,
  "Deprecated (use 'input' field instead)."
  selector: FeatureSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateFeatureDataInput
) : FeatureMutationOutput

  # Mutation for deleting a Feature document
  deleteFeature(
  input: DeleteFeatureInput,
  "Deprecated (use 'input' field instead)."
  selector: FeatureSelectorUniqueInput
) : FeatureMutationOutput

  # Mutation for creating new Distribution documents
  createDistribution(
  input: CreateDistributionInput,
  "Deprecated (use 'input' field instead)."
  data: CreateDistributionDataInput
) : DistributionMutationOutput

  # Mutation for updating a Distribution document
  updateDistribution(
  input: UpdateDistributionInput,
  "Deprecated (use 'input' field instead)."
  selector: DistributionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDistributionDataInput 
) : DistributionMutationOutput

  # Mutation for upserting a Distribution document
  upsertDistribution(
  input: UpsertDistributionInput,
  "Deprecated (use 'input' field instead)."
  selector: DistributionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateDistributionDataInput
) : DistributionMutationOutput

  # Mutation for deleting a Distribution document
  deleteDistribution(
  input: DeleteDistributionInput,
  "Deprecated (use 'input' field instead)."
  selector: DistributionSelectorUniqueInput
) : DistributionMutationOutput

  # Mutation for creating new Region documents
  createRegion(
  input: CreateRegionInput,
  "Deprecated (use 'input' field instead)."
  data: CreateRegionDataInput
) : RegionMutationOutput

  # Mutation for updating a Region document
  updateRegion(
  input: UpdateRegionInput,
  "Deprecated (use 'input' field instead)."
  selector: RegionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRegionDataInput 
) : RegionMutationOutput

  # Mutation for upserting a Region document
  upsertRegion(
  input: UpsertRegionInput,
  "Deprecated (use 'input' field instead)."
  selector: RegionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateRegionDataInput
) : RegionMutationOutput

  # Mutation for deleting a Region document
  deleteRegion(
  input: DeleteRegionInput,
  "Deprecated (use 'input' field instead)."
  selector: RegionSelectorUniqueInput
) : RegionMutationOutput

  # Mutation for creating new Plan documents
  createPlan(
  input: CreatePlanInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePlanDataInput
) : PlanMutationOutput

  # Mutation for updating a Plan document
  updatePlan(
  input: UpdatePlanInput,
  "Deprecated (use 'input' field instead)."
  selector: PlanSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePlanDataInput 
) : PlanMutationOutput

  # Mutation for upserting a Plan document
  upsertPlan(
  input: UpsertPlanInput,
  "Deprecated (use 'input' field instead)."
  selector: PlanSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePlanDataInput
) : PlanMutationOutput

  # Mutation for deleting a Plan document
  deletePlan(
  input: DeletePlanInput,
  "Deprecated (use 'input' field instead)."
  selector: PlanSelectorUniqueInput
) : PlanMutationOutput

  # Mutation for creating new App documents
  createApp(
  input: CreateAppInput,
  "Deprecated (use 'input' field instead)."
  data: CreateAppDataInput
) : AppMutationOutput

  # Mutation for updating a App document
  updateApp(
  input: UpdateAppInput,
  "Deprecated (use 'input' field instead)."
  selector: AppSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateAppDataInput 
) : AppMutationOutput

  # Mutation for upserting a App document
  upsertApp(
  input: UpsertAppInput,
  "Deprecated (use 'input' field instead)."
  selector: AppSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateAppDataInput
) : AppMutationOutput

  # Mutation for deleting a App document
  deleteApp(
  input: DeleteAppInput,
  "Deprecated (use 'input' field instead)."
  selector: AppSelectorUniqueInput
) : AppMutationOutput

  # Mutation for creating new Backup documents
  createBackup(
  input: CreateBackupInput,
  "Deprecated (use 'input' field instead)."
  data: CreateBackupDataInput
) : BackupMutationOutput

  # Mutation for updating a Backup document
  updateBackup(
  input: UpdateBackupInput,
  "Deprecated (use 'input' field instead)."
  selector: BackupSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateBackupDataInput 
) : BackupMutationOutput

  # Mutation for upserting a Backup document
  upsertBackup(
  input: UpsertBackupInput,
  "Deprecated (use 'input' field instead)."
  selector: BackupSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateBackupDataInput
) : BackupMutationOutput

  # Mutation for deleting a Backup document
  deleteBackup(
  input: DeleteBackupInput,
  "Deprecated (use 'input' field instead)."
  selector: BackupSelectorUniqueInput
) : BackupMutationOutput

}


